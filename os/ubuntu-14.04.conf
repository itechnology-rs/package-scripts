name:      "ubuntu-14.04-apc3"
namespace: "/apcera/pkg/os"
version:   "14.04-apc3"

sources [
  { url: "https://s3.amazonaws.com/apcera-sources/os/debootstrap_1.0.59ubuntu0.4_all.deb",
    sha256: "b2488cf687cf6127b323c6fb75d1d82ff352a9e61237719509122a21b221b845" }
]

# We want the build-depend to be "buildroot" but we're hitting linkage problems
# for stagers built against liblzma and rpath not helping. So, cutting
# buildroot peculiarities out of the equation.
# build_depends [ { os: "buildroot" } ]
build_depends [ { os: "ubuntu-14.04" },
                { package: "build-essential" } ]

provides      [ { os: "linux" },
                { os: "ubuntu" },
                { os: "ubuntu-14.04" },
                { os: "ubuntu-14.04-apc3" } ]

environment {
  "PATH": "$PATH:/bin:/sbin:/usr/bin:/usr/sbin"
}

snapshot_path "/rootfs"

# This build script upgrades the ubuntu base on the updates as of that date. So, please be aware that
# each time when you create a new Ubuntu-14.04.3 package, it will have a different one. So, it is recommended
# to use a date/time tag in the name of created package.
build (
      export BUILDPATH
      BUILDPATH=$(pwd)

      # extract the package - since no dpkg, just using ar
      ar x debootstrap_1.0.59ubuntu0.4_all.deb data.tar.xz
      xz -d data.tar.xz
      cd / || exit
      sudo tar xvf "$BUILDPATH/data.tar"
      cd "$BUILDPATH" || exit

      # Make the rootfs
      sudo mkdir -p /rootfs

      # Install fakeroot and fakechroot. Need them for debootstrap.
      sudo apt-get update
      sudo apt-get -f -y install software-properties-common
      # Add security for main and install universe
      sudo add-apt-repository "deb http://security.ubuntu.com/ubuntu $(lsb_release -sc)-security main"
      sudo add-apt-repository "deb http://archive.ubuntu.com/ubuntu $(lsb_release -sc) universe"
      sudo add-apt-repository "deb http://security.ubuntu.com/ubuntu $(lsb_release -sc)-security universe"
      sudo add-apt-repository "deb http://archive.ubuntu.com/ubuntu $(lsb_release -sc)-updates main restricted"
      sudo add-apt-repository "deb http://archive.ubuntu.com/ubuntu $(lsb_release -sc)-updates universe"
      sudo apt-get update
      sudo apt-get -f -y install fakeroot fakechroot

      # Run debootstrap, do not use the fakechroot variant. It doesn't work.
      sudo fakechroot fakeroot debootstrap --verbose --arch=amd64 --variant=minbase trusty /rootfs http://archive.ubuntu.com/ubuntu/

      # Remove dev that debootstrap creates. Then recursively bind the correct /dev devices.
      sudo rm -rf /rootfs/dev
      sudo mkdir -p /rootfs/dev
      sudo mount --rbind /dev /rootfs/dev

      # fakeroot has created the runtime linker as a symlink which can be accessed without a real chroot, because the kernel needs
      # to have a real working path, since it's invoked from the ELF loader, not via a libc-wrapping function.
      # We're now going to switch to using real chroot, so the kernel needs a chroot-relative symlink.
      # We want to handle version variances with future OSes without needing to patch this.
      target=$(readlink /rootfs/lib64/ld-linux-x86-64.so.2)
      sudo ln -nsf "${target#/rootfs}" /rootfs/lib64/ld-linux-x86-64.so.2

      # Find all symlinks and fix them to not use /rootfs
      # Thanks pdp.
      sudo find /rootfs -type l -lname /rootfs/\* -print0 | sudo xargs -0 -I '{}' sh -c 'n="{}"; t="$(readlink "$n")"; ln -nsf "${t#/rootfs}" "$n"'

      # chroot in - Note the EOS at the end. This is using busybox's sh and
      # sending the contents in, so has to be fairly basic.
      sudo chroot /rootfs /bin/bash << '_EOS'
      # disable interactive dpkg
      echo debconf debconf/frontend select noninteractive | debconf-set-selections

      cat > /etc/profile << '_EOF'
# /etc/profile: system-wide .profile file for the Bourne shell (sh(1))
# and Bourne compatible shells (bash(1), ksh(1), ash(1), ...).

if [ "$PS1" ]; then
  if [ "$BASH" ] && [ "$BASH" != "/bin/sh" ]; then
    # The file bash.bashrc already sets the default PS1.
    # PS1='\h:\w\$ '
    if [ -f /etc/bash.bashrc ]; then
      . /etc/bash.bashrc
    fi
  else
    if [ "$(id -u)" -eq 0 ]; then
      PS1='# '
    else
      PS1='$ '
    fi
  fi
fi

# The default umask is now handled by pam_umask.
# See pam_umask(8) and /etc/login.defs.

if [ -d /etc/profile.d ]; then
  for i in /etc/profile.d/*.sh; do
    if [ -r $i ]; then
      . $i
    fi
  done
  unset i
fi
_EOF

      cat > /etc/bash.bashrc << '_EOF'
# System-wide .bashrc file for interactive bash(1) shells.

# To enable the settings / commands in this file for login shells as well,
# this file has to be sourced in /etc/profile.

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, overwrite the one in /etc/profile)
PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '

# Commented out, don't overwrite xterm -T "title" -n "icontitle" by default.
# If this is an xterm set the title to user@host:dir
#case "$TERM" in
#xterm*|rxvt*)
#    PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD}\007"'
#    ;;
#*)
#    ;;
#esac

# enable bash completion in interactive shells
#if ! shopt -oq posix; then
#  if [ -f /usr/share/bash-completion/bash_completion ]; then
#    . /usr/share/bash-completion/bash_completion
#  elif [ -f /etc/bash_completion ]; then
#    . /etc/bash_completion
#  fi
#fi

# sudo hint
if [ ! -e "$HOME/.sudo_as_admin_successful" ] && [ ! -e "$HOME/.hushlogin" ] ; then
    case " $(groups) " in *\ admin\ *)
    if [ -x /usr/bin/sudo ]; then
  cat << 'EOF'
  To run a command as administrator (user "root"), use "sudo <command>".
  See "man sudo_root" for details.
EOF
    fi
    esac
fi

# if the command-not-found package is installed, use it
if [ -x /usr/lib/command-not-found -o -x /usr/share/command-not-found/command-not-found ]; then
  function command_not_found_handle {
          # check because c-n-f could've been removed in the meantime
                if [ -x /usr/lib/command-not-found ]; then
       /usr/lib/command-not-found -- "$1"
                   return $?
                elif [ -x /usr/share/command-not-found/command-not-found ]; then
       /usr/share/command-not-found/command-not-found -- "$1"
                   return $?
    else
       printf "%s: command not found\n" "$1" >&2
       return 127
    fi
  }
fi
_EOF

      # generate and setup default locale (en_US.UTF-8)
      locale-gen en_US.UTF-8
      update-locale LC_CTYPE="en_US.UTF-8"
      echo "LC_CTYPE=en_US.UTF-8" >> /etc/environment

      # prevent init scripts from running install/update
      echo -e '#!/bin/sh\nexit 101' > /usr/sbin/policy-rc.d
      chmod +x /usr/sbin/policy-rc.d

      # take over initctl
      dpkg-divert --local --rename --add /sbin/initctl
      ln -sf /bin/true /sbin/initctl

      echo "deb http://archive.ubuntu.com/ubuntu trusty universe" >> /etc/apt/sources.list
      echo "deb http://security.ubuntu.com/ubuntu trusty-security main universe" >> /etc/apt/sources.list
      echo "deb http://archive.ubuntu.com/ubuntu trusty-updates main restricted" >> /etc/apt/sources.list
      echo "deb http://archive.ubuntu.com/ubuntu trusty-updates universe" >> /etc/apt/sources.list

      # update package list
      apt-get update
      apt-get upgrade -y
      apt-get install -f -y adduser apt bash bzip2 debconf debconf-i18n iputils-ping less locales lsb-release makedev mawk net-tools netbase netcat-openbsd passwd procps sudo tzdata ubuntu-keyring udev unzip upstart ureadahead whiptail apt-transport-https ca-certificates curl openssh-client screen wget zip libadns1 libbz2-1.0 libc6 libcurl3 libcurl3-gnutls libevent-2.0-5 libevent-core-2.0-5 libevent-extra-2.0-5 libevent-openssl-2.0-5 libevent-pthreads-2.0-5 libexpat1 libgcc1 libglib2.0-0 libicu52 libncurses5 libpcre3 libpcrecpp0 libreadline6 libssl1.0.0 libstdc++6 libtinfo5 libxml2 libxslt1.1 zlib1g libmysqlclient18 libsqlite3-0 libpq5 libgomp1 cron vim-tiny

      # add the runner user (uid 99)
      addgroup --gid 99 runner
      adduser --system --uid 99 --gid 99 \
        --shell /bin/bash --disabled-password runner

      usermod -a -G crontab runner

      # enable sudo for the runner user
      #
      # CAVEAT: in Ubuntu 13.10, we used #99 instead of runner and the reason
      # is unclear; however, sudo 1.8.9 bundled with Ubuntu 14.04 breaks that
      # syntax, forcing us to use "runner" anyway.
      # Fixed upstream with mercurial commit 315eff4add59 (2014-04-09).
      #
      echo "runner ALL=(ALL:ALL) NOPASSWD: ALL" >> /etc/sudoers
      sed -i -e '/Defaults\s\+env_reset/a Defaults\texempt_group=runner' /etc/sudoers
      sed -i -e '/Defaults\s\+env_reset/a Defaults\tenv_keep = "SSH_AUTH_SOCK PATH"' /etc/sudoers

      # speed up dpkg by having it skip a sync() call after extracting
      echo 'force-unsafe-io' > /etc/dpkg/dpkg.cfg.d/02apt-speedup

      # trigger the equivalent of an apt-get clean after every install
      echo 'DPkg::Post-Invoke {"/bin/rm -f /var/cache/apt/archives/*.deb || true";};' > /etc/apt/apt.conf.d/no-cache

      # some cleanup
      rm -f /var/cache/apt/archives/*.deb
      rm -f /var/cache/apt/*cache.bin
      rm -rf /var/lib/apt/lists
      mkdir /var/lib/apt/lists
      mkdir /var/lib/apt/lists/partial
      rm -f /etc/ssh/ssh_host_*

      # clear fstab
      echo "#nothing" > /etc/fstab

      # update /etc/hosts
      echo -e "127.0.0.1 localhost localhost.localdomain\n127.0.0.1 container" > /etc/hosts

      # update /etc/resolv.conf
      echo -e "domain apcera.me\nnameserver 8.8.8.8" > /etc/resolv.conf

      # disable unneeded services
      rm -f /etc/init/ureadahead*
      rm -f /etc/init/plymouth*
      rm -f /etc/init/hwclock*
      rm -f /etc/init/hostname*
      rm -f /etc/init/*udev*
      rm -f /etc/init/module-*
      rm -f /etc/init/mountall-*
      rm -f /etc/init/mounted-*
      rm -f /etc/init/network-*
      rm -f /etc/init/procps*
      rm -f /etc/init/rcS*
      rm -f /etc/init/rsyslog*

      # don't run cpu frequency scaling
      rm -f /etc/rc*.d/S*ondemand

      # disable selinux
      mkdir -p /selinux
      echo 0 > /selinux/enforce

      # clear motd message items
      rm -f /etc/update-motd.d/*
      rm -f /etc/motd
      touch /etc/motd
      mv /etc/legal /etc/legal.ubuntu
      touch /etc/legal

      # remove some uncessary folders
      rm -rf /boot
      rm -rf /home
      rm -rf /media
      rm -rf /mnt
      rm -rf /opt

      # note that we get capsule connection errors on every connect unless
      # root's homedir exists; not sure why this only bit us with the 14.04
      # build if was removed before.  To keep things clean, we remove all
      # content and recreate an empty directory.
      rm -rf /root
      mkdir /root

      # remove console related upstart scripts
      rm -f /etc/init/tty*

      # write the current time as buildtime
      date +%Y%m%d > /etc/buildtime

# this must be at the beginning of the line because the whitespaces carries in,
# and it is expected on a line by itself.
_EOS
)
